#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6
#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };

        shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <22 23>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        five_right: five_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT>;
            label = "FIVE_RIGHT";
        };

        five_up: five_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW>;
            label = "FIVE_UP";
        };

        five_down: five_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN_ARROW &kp DOWN_ARROW &kp DOWN_ARROW &kp DOWN_ARROW &kp DOWN_ARROW>;
            label = "FIVE_DOWN";
        };

        five_left: five_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT_ARROW>;
            label = "FIVE_LEFT";
        };

        backSpaceOneWord: backSpaceOneWord {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LEFT_ARROW)) &kp BACKSPACE>;
            label = "BACKSPACEONEWORD";
        };

        deleteOneWord: deleteOneWord {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(RIGHT_ARROW)) &kp DELETE>;
            label = "DELETEONEWORD";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R                       &kp T                                                         &kp Y                   &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D         &kp F                       &kp G                 &none           &lt_to_layer_0 6 MINUS  &kp H                   &kp J  &kp K      &kp L    &mkp LCLK
&kp Z      &kp X         &kp C         &kp V                       &kp B                 &kp LANG2       &kp LANG1               &kp N                   &kp M  &kp COMMA  &kp DOT  &lt 5 SLASH
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 2 BACKSPACE  &mt LEFT_SHIFT SPACE  &kp DELETE      &lt_to_layer_0 1 TAB    &lt_to_layer_0 3 ENTER                             &mkp RCLK
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FUNCTION {
            bindings = <
&kp F1            &kp F2            &kp F3            &kp F4            &kp F5                          &kp F6            &kp F7            &kp F8            &kp F9            &kp F10
&kp NUMBER_1      &kp NUMBER_2      &kp NUMBER_3      &kp NUMBER_4      &kp N5      &none       &trans  &kp NUMBER_6      &kp N7            &kp N8            &kp N9            &kp N0
&kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(N5)  &trans      &trans  &kp LG(NUMBER_6)  &kp LG(NUMBER_7)  &kp LG(NUMBER_8)  &kp LG(NUMBER_9)  &kp F11
&trans            &trans            &trans            &trans            &trans      &trans      &trans  &trans                                                                  &kp F12
            >;
        };

        SYMBOL {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH        &kp DOLLAR      &kp PERCENT                                     &kp CARET         &kp AMPERSAND      &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp COLON        &kp PLUS     &kp UNDERSCORE  &kp LEFT_BRACE  &kp RIGHT_BRACE  &none          &kp UNDERSCORE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp MINUS      &kp EQUAL             &kp SEMICOLON
&kp QUESTION     &kp GRAVE    &kp TILDE       &kp BACKSLASH   &kp PIPE         &kp EQUAL      &trans          &kp SQT           &kp DOUBLE_QUOTES  &kp LESS_THAN  &kp GREATER_THAN      &kp SLASH
&trans           &trans       &trans          &trans          &trans           &trans         &trans          &trans                                                                    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        ARROW {
            bindings = <
&kp LA(F4)  &kp LC(LS(TAB))     &kp LC(TAB)       &kp K_MENU          &kp INSERT                                          &kp DELETE  &kp BACKSPACE   &kp LG(LS(S))  &kp ENTER  &kp LC(W)
&kp F14     &five_left          &five_up          &five_down          &five_right    &trans            &kp LC(PAGE_UP)    &kp LEFT    &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT  &kp ESCAPE
&kp F15     &kp LG(LEFT_ARROW)  &kp LG(UP_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(RIGHT)  &kp CAPSLOCK      &kp LC(PAGE_DOWN)  &kp HOME    &kp PAGE_DOWN   &kp PAGE_UP    &kp END    &kp LA(RIGHT)
&trans      &trans              &trans            &trans              &trans         &trans            &trans             &trans                                                &kp LA(LEFT_ARROW)
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        etc {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &to 0         &to 7         &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        readbook {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans          &trans          &trans        &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans          &trans          &trans        &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                   &trans
            >;
        };
    };
};
